name: Deploy-GKE

#on: [workflow_dispatch]
on:
  push:
    branches: [ "testing_gcp", "master" ]

env:
  GKE_PROJECT: ${{ secrets.GKE_PROJECT }}
  GKE_CLUSTER: webapp1-demo-cluster
  GKE_APP_NAME: webapp1-demo-shop
  GKE_SERVICE: webapp1-service
  GKE_SERVICE_ACCOUNT: webapp1-serviceaccount
  GKE_NAMESPACE: webapp1-namespace
  GKE_DEPLOYMENT_NAME: webapp1-deployment
  GKE_REGION: us-east4
  GKE_ZONE: us-east4-a
  GKE_ADDITIONAL_ZONE: us-east4-b
  GKE_SA_KEY: ${{ secrets.GKE_SA_KEY }}
  GKE_SA_EMAIL: ${{ secrets.GKE_SA_EMAIL }}
  APP_VERSION: ${{ github.sha }}
  MANIFESTS_DIR: gcp/gke/deploy/manifests/webapp
  SERVICE_MESH_DIR: gcp/gke/deploy/serviceMesh
  APP_DIR: app1
  GKE_APP_PORT: 25443
  GITHUB_SHA: ${{ github.sha }}
jobs:
  Checkout:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    # Setup gcloud CLI
    - uses: google-github-actions/setup-gcloud@v0.6.0
      with:
        service_account_key: ${{ secrets.GKE_SA_KEY }}
        project_id: ${{ secrets.GKE_PROJECT }}
        export_default_credentials: true 
        
  Test:
    needs: [Checkout]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Test Application
        working-directory:  ${{ env.APP_DIR }}
        run: |-  
          echo "Testing Application, Not complete yet"
          uname -a
          hostname -f

  # Build the Docker image
  Build:
    needs: [Test] 
    runs-on: ubuntu-latest
    steps:
    - uses: google-github-actions/setup-gcloud@v0.6.0
      with:
        service_account_key: ${{ secrets.GKE_SA_KEY }}
        project_id: ${{ secrets.GKE_PROJECT }}
        export_default_credentials: true   
    - uses: actions/checkout@v3  
    - name: Build, Scan and Push
      working-directory:  ${{ env.APP_DIR }}
      run: |-  
        docker build \
          --tag "${{env.GKE_REGION}}-docker.pkg.dev/${{env.GKE_PROJECT}}/${{env.GKE_PROJECT}}/${{env.GKE_APP_NAME}}:${{env.APP_VERSION}}" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" \
          .
        gcloud auth configure-docker ${{env.GKE_REGION}}-docker.pkg.dev --quiet
        docker push "${{env.GKE_REGION}}-docker.pkg.dev/${{env.GKE_PROJECT}}/${{env.GKE_PROJECT}}/${{env.GKE_APP_NAME}}:${{env.APP_VERSION}}"    
  #Image scan with Aqua Trivy     
  Scan:
    needs: [Build]
    runs-on: ubuntu-latest
    steps:
    - uses: google-github-actions/setup-gcloud@v0.6.0
      with:
        service_account_key: ${{ secrets.GKE_SA_KEY }}
        project_id: ${{ secrets.GKE_PROJECT }}
        export_default_credentials: true       
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{env.GKE_REGION}}-docker.pkg.dev/${{env.GKE_PROJECT}}/${{env.GKE_PROJECT}}/${{env.GKE_APP_NAME}}:${{env.APP_VERSION}}'
        format: 'table'
        #exit-code: '1' #By pass and continue if vulnerabilities found (Not recommended, testing complete devSecOps pipeline)
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'  
    # Install helm
    - name: Install Helm
      run: |
        curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
    # Install Linkerd
    #- name: Install Linkerd
    #  run: |
    #    curl -sL https://run.linkerd.io/install | sh
    #    export PATH=$PATH:$HOME/.linkerd2/bin
    #    linkerd check --pre
    #    linkerd install | kubectl apply -f -
    #    linkerd check
      
    #Upload Scan results to Github Code Scanning
    #- name: Upload Trivy scan results to GitHub Security tab
    #  uses: github/codeql-action/upload-sarif@v2
    #  with:
    #    sarif_file: 'trivy-results.sarif'  
  Deploy:
    needs: [Scan]
    runs-on: ubuntu-latest
    environment: production
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    # Setup gcloud CLI
    - uses: google-github-actions/setup-gcloud@v0.6.0
      with:
        service_account_key: ${{ secrets.GKE_SA_KEY }}
        project_id: ${{ secrets.GKE_PROJECT }}
        export_default_credentials: true 

    # Get the GKE credentials so we can deploy to the cluster
    - uses: google-github-actions/get-gke-credentials@v0.5.0
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}
        credentials: ${{ secrets.GKE_SA_KEY }}

    #To be tested why this is needed: give the Google Service Acccount cluster-admin clusterrole permissions 
    #- name: Deploy
    #  working-directory: ${{env.MANIFESTS_DIR}}
    #  run: |-
    #    kubectl create clusterrolebinding ${{env.GKE_SERVICE_ACCOUNT}}   --clusterrole cluster-admin   --user ${{env.GKE_SVC_MAIL}}
    # Deploy the new Docker image to the GKE cluster
    - name: Deploy
      working-directory: ${{env.MANIFESTS_DIR}}
      run: |-
        envsubst < webapp1.yaml | kubectl apply -f -
        envsubst < Service.yaml | kubectl apply -f -
        envsubst < Deployment.yaml | kubectl apply -f -
        kubectl get pods -o wide
        kubectl get svc -o wide 
        sleep 60
    #   curl https://raw.githubusercontent.com/linkerd/linkerd-examples/master/thanos-demo/linkerd-install-gke.yaml  | kubectl apply -f -
    #   envsubst <  ../../serviceMesh/linkerd-install-gke.yaml | kubectl apply -f - 
    #   envsubst <  ../../serviceMesh/linkerd-install-gke.yaml | kubectl apply -f - 
    #   bash serviceMesh/setup_linkerd.sh
    #Check application is running, test REST endpoints
    - name: Verify Coontainer Application
      run: |-
        curl -Lk https://`kubectl get svc -n ${{env.GKE_NAMESPACE}} | grep ${{env.GKE_SERVICE}} | awk '{print $4}'`:${{env.GKE_APP_PORT}}/backup/status 
        curl -Lk https://`kubectl get svc -n ${{env.GKE_NAMESPACE}} | grep ${{env.GKE_SERVICE}} | awk '{print $4}'`:${{env.GKE_APP_PORT}}/backup/create 
        curl -Lk https://`kubectl get svc -n ${{env.GKE_NAMESPACE}} | grep ${{env.GKE_SERVICE}} | awk '{print $4}'`:${{env.GKE_APP_PORT}}/backup/delete
    
    #Notify Slack
    - name: Notify Slack
      uses: ravsamhq/notify-slack-action@v2
      if: always()
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_CI_HOOK }}
      with:
        status: ${{ job.status }}
        notification_title: "{workflow}:{job} has {status_message}"
        message_format: "{emoji} *{workflow}:{job}* {status_message} in <{repo_url}|{repo}>"
        footer: "Logs <{run_url}|{job}>"
        notify_when: "failure,success"      